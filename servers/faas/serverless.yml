service: react-ssr-faas

frameworkVersion: '3'

provider:
  name: ${opt:provider, env:SERVERLESS_PROVIDER, 'aws'} # 默认使用 AWS，可通过参数或环境变量指定
  runtime: ${env:RUNTIME, 'nodejs18.x'}
  stage: ${opt:stage, env:STAGE, 'dev'}
  region: ${opt:region, env:REGION, 'us-east-1'}
  memorySize: ${env:MEMORY_SIZE, 1024}
  timeout: ${env:TIMEOUT, 30}
  environment:
    NODE_ENV: ${opt:stage, env:STAGE, 'dev'}
    CACHE_ENABLED: ${env:CACHE_ENABLED, 'true'}
    CACHE_TTL: ${env:CACHE_TTL, '60000'}
    CACHE_STORAGE: ${env:CACHE_STORAGE, 'memory'}
    CACHE_MAX_SIZE: ${env:CACHE_MAX_SIZE, '1000'}
    CACHE_NAMESPACE: ${env:CACHE_NAMESPACE, 'ssr-cache'}
    ASSETS_PREFIX: ${env:ASSETS_PREFIX, ''}
    CLIENT_ENTRY: ${env:CLIENT_ENTRY, '/client.js'}
    TEMPLATE_PATH: ${env:TEMPLATE_PATH, ''}
    IS_SERVERLESS: 'true'
    SERVERLESS_PROVIDER: ${opt:provider, env:SERVERLESS_PROVIDER, 'aws'}

# 云服务配置
custom:
  # AWS 配置
  awsConfig:
    apiGateway:
      minimumCompressionSize: ${env:API_GATEWAY_COMPRESSION_SIZE, 1024}
    vpc:
      securityGroupIds:
        - ${env:VPC_SECURITY_GROUP, 'sg-default'}
      subnetIds:
        - ${env:VPC_SUBNET_A, 'subnet-default-a'}
        - ${env:VPC_SUBNET_B, 'subnet-default-b'}
    provisionedConcurrency: ${env:PROVISIONED_CONCURRENCY, 5}

  # 阿里云函数计算配置
  aliCloudConfig:
    region: ${env:ALI_REGION, 'cn-hangzhou'}
    service:
      name: ${env:ALI_SERVICE_NAME, 'react-ssr-service'}
      description: ${env:ALI_SERVICE_DESCRIPTION, 'React SSR Service'}
    function:
      handler: ${env:ALI_HANDLER, 'src/serverless/adapter.fcHandler'}
      memorySize: ${env:ALI_MEMORY_SIZE, 1024}
      timeout: ${env:ALI_TIMEOUT, 30}

  # 腾讯云函数配置
  tencentConfig:
    region: ${env:TENCENT_REGION, 'ap-guangzhou'}
    runtime: ${env:TENCENT_RUNTIME, 'Nodejs18.15'}
    handler: ${env:TENCENT_HANDLER, 'src/serverless/adapter.scfHandler'}

  # 自定义云服务配置
  customConfig:
    provider: ${env:CUSTOM_PROVIDER, 'custom'}
    region: ${env:CUSTOM_REGION, ''}
    runtime: ${env:CUSTOM_RUNTIME, 'nodejs18'}
    handler: ${env:CUSTOM_HANDLER, 'src/serverless/adapter.customHandler'}
    # 可以添加自定义云服务所需的其他配置

  # 静态资源配置
  assets:
    s3Bucket: ${env:ASSETS_BUCKET, 'react-ssr-assets'}
    cdnDomain: ${env:CDN_DOMAIN, ''}
    # 阿里云 OSS
    aliyunOss:
      bucket: ${env:ALIYUN_OSS_BUCKET, ''}
      region: ${env:ALIYUN_OSS_REGION, ''}
    # 腾讯云 COS
    tencentCos:
      bucket: ${env:TENCENT_COS_BUCKET, ''}
      region: ${env:TENCENT_COS_REGION, ''}

  # 缓存配置
  cache:
    redis:
      host: ${env:REDIS_HOST, 'localhost'}
      port: ${env:REDIS_PORT, 6379}
      password: ${env:REDIS_PASSWORD, ''}
      db: ${env:REDIS_DB, 0}

  # Webpack 配置
  webpack:
    webpackConfig: ${env:WEBPACK_CONFIG, 'webpack.serverless.js'}
    includeModules: true
    packager: ${env:PACKAGER, 'npm'}
    excludeFiles: src/**/*.test.ts

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-prune-plugin

# 打包配置
package:
  individually: true
  exclude:
    - .git/**
    - node_modules/aws-sdk/**
    - "**/*.test.ts"
    - "**/*.spec.ts"

# 函数定义
functions:
  # AWS Lambda 函数
  aws-ssr:
    handler: ${env:AWS_HANDLER, 'src/serverless/adapter.lambdaHandler'}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    provisionedConcurrency: ${self:custom.awsConfig.provisionedConcurrency}
    vpc:
      securityGroupIds: ${self:custom.awsConfig.vpc.securityGroupIds}
      subnetIds: ${self:custom.awsConfig.vpc.subnetIds}
    environment:
      AWS_LAMBDA: 'true'
      REDIS_HOST: ${self:custom.cache.redis.host}
      REDIS_PORT: ${self:custom.cache.redis.port}
      REDIS_PASSWORD: ${self:custom.cache.redis.password}
      REDIS_DB: ${self:custom.cache.redis.db}
      ASSETS_PREFIX: ${env:AWS_ASSETS_PREFIX, self:custom.assets.cdnDomain}

  # 阿里云函数
  aliyun-ssr:
    handler: ${self:custom.aliCloudConfig.function.handler}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    provider:
      name: aliyun
      runtime: ${env:ALI_RUNTIME, 'nodejs18'}
      region: ${self:custom.aliCloudConfig.region}
    environment:
      FC_PROVIDER: 'aliyun'
      REDIS_HOST: ${self:custom.cache.redis.host}
      REDIS_PORT: ${self:custom.cache.redis.port}
      REDIS_PASSWORD: ${self:custom.cache.redis.password}
      REDIS_DB: ${self:custom.cache.redis.db}
      ASSETS_PREFIX: ${env:ALI_ASSETS_PREFIX, env:ALIYUN_OSS_ENDPOINT, self:custom.assets.cdnDomain}

  # 腾讯云函数
  tencent-ssr:
    handler: ${self:custom.tencentConfig.handler}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    provider:
      name: tencent
      runtime: ${self:custom.tencentConfig.runtime}
      region: ${self:custom.tencentConfig.region}
    environment:
      SCF_PROVIDER: 'tencent'
      REDIS_HOST: ${self:custom.cache.redis.host}
      REDIS_PORT: ${self:custom.cache.redis.port}
      REDIS_PASSWORD: ${self:custom.cache.redis.password}
      REDIS_DB: ${self:custom.cache.redis.db}
      ASSETS_PREFIX: ${env:TENCENT_ASSETS_PREFIX, self:custom.assets.cdnDomain}

  # 自定义云函数
  custom-ssr:
    handler: ${self:custom.customConfig.handler}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    provider:
      name: ${self:custom.customConfig.provider}
      runtime: ${self:custom.customConfig.runtime}
      region: ${self:custom.customConfig.region}
    environment:
      CUSTOM_PROVIDER: ${self:custom.customConfig.provider}
      REDIS_HOST: ${self:custom.cache.redis.host}
      REDIS_PORT: ${self:custom.cache.redis.port}
      REDIS_PASSWORD: ${self:custom.cache.redis.password}
      REDIS_DB: ${self:custom.cache.redis.db}
      ASSETS_PREFIX: ${env:CUSTOM_ASSETS_PREFIX, self:custom.assets.cdnDomain}

# 资源定义
resources:
  Resources:
    # S3 存储桶（用于静态资源）
    AssetsBucket:
      Type: AWS::S3::Bucket
      Condition: IsAwsProvider
      Properties:
        BucketName: ${self:custom.assets.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    # CloudFront 分发（CDN）
    AssetsDistribution:
      Type: AWS::CloudFront::Distribution
      Condition: IsAwsProvider
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.assets.s3Bucket}.s3.amazonaws.com
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

    # ElastiCache Redis（用于缓存）
    SSRCache:
      Type: AWS::ElastiCache::CacheCluster
      Condition: CreateRedisCache
      Properties:
        CacheNodeType: ${env:REDIS_NODE_TYPE, 'cache.t3.micro'}
        Engine: redis
        NumCacheNodes: ${env:REDIS_NUM_NODES, 1}
        VpcSecurityGroupIds: ${self:custom.awsConfig.vpc.securityGroupIds}
        CacheSubnetGroupName: !Ref SSRCacheSubnetGroup

    # Redis 子网组
    SSRCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Condition: CreateRedisCache
      Properties:
        Description: Subnet group for SSR Redis cache
        SubnetIds: ${self:custom.awsConfig.vpc.subnetIds}

  # 条件定义
  Conditions:
    CreateRedisCache:
      Fn::And:
        - Fn::Equals: ["${env:CACHE_STORAGE}", "redis"]
        - Fn::Equals: ["${opt:provider, env:SERVERLESS_PROVIDER, 'aws'}", "aws"]
    IsAwsProvider:
      Fn::Equals: ["${opt:provider, env:SERVERLESS_PROVIDER, 'aws'}", "aws"]

  # 输出
  Outputs:
    ApiGatewayUrl:
      Description: URL of the API Gateway endpoint
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
      Condition: IsAwsProvider

    CloudFrontUrl:
      Description: URL of the CloudFront distribution
      Value: !GetAtt AssetsDistribution.DomainName
      Condition: IsAwsProvider

    S3BucketName:
      Description: Name of the S3 bucket for static assets
      Value: ${self:custom.assets.s3Bucket}
      Condition: IsAwsProvider