[{"id":0,"title":"","content":"","routePath":"/api/component-mapper","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"","content":"","routePath":"/api/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"渲染器 API","content":"#\n\n本文档提供渲染器相关的 API 参考。\n\n\nRendererCore#\n\n渲染引擎核心类，负责协调组件映射、Schema解析和样式应用。\n\n\n\n\n构造函数#\n\n\n\n参数名       类型               必填   描述\noptions   IRenderOptions   否    渲染选项\n\n\n方法#\n\ninit#\n\n初始化渲染引擎。\n\n\n\n参数名      类型               必填   描述\nassets   IAssetsPackage   是    资源包\n\nrender#\n\n渲染Schema。\n\n\n\n参数名         类型            必填   描述\nschema      DySchema      是    Schema协议\ncontainer   HTMLElement   是    容器元素\n\n返回值：渲染实例\n\ngetContext#\n\n获取渲染上下文。\n\n\n\n返回值：渲染上下文\n\ngetPerformanceMonitor#\n\n获取性能监控器。\n\n\n\n返回值：性能监控器（如果启用）\n\n\n示例#\n\n\n\n\nSandboxRenderer#\n\n沙箱渲染器，提供隔离的渲染环境。\n\n\n\n\n构造函数#\n\n\n\n\n方法#\n\nrender#\n\n在沙箱中渲染Schema。\n\n\n\n参数名         类型            必填   描述\nschema      DySchema      是    Schema协议\ncontainer   HTMLElement   是    容器元素\n\n返回值：渲染实例\n\ndestroy#\n\n销毁沙箱。\n\n\n\n\n示例#\n\n\n\n\nRenderPerformanceMonitor#\n\n渲染性能监控器，用于跟踪和记录渲染性能指标。\n\n\n\n\n方法#\n\ntrackRenderStart#\n\n跟踪渲染开始。\n\n\n\n参数名        类型       必填   描述\nschemaId   string   是    Schema ID\n\ntrackRenderEnd#\n\n跟踪渲染结束。\n\n\n\n参数名        类型       必填   描述\nschemaId   string   是    Schema ID\n\ngetMetrics#\n\n获取所有渲染指标。\n\n\n\n返回值：渲染指标数组\n\ngetSlowRenders#\n\n获取慢渲染指标。\n\n\n\n参数名         类型       必填   描述\nthreshold   number   否    阈值（毫秒），默认100ms\n\n返回值：慢渲染指标数组\n\ngetAverageRenderTime#\n\n获取平均渲染时间。\n\n\n\n返回值：平均渲染时间（毫秒）\n\ngetSlowestRender#\n\n获取最慢渲染。\n\n\n\n返回值：最慢渲染指标\n\nclearMetrics#\n\n清空指标。\n\n\n\ngenerateReport#\n\n生成性能报告。\n\n\n\n返回值：性能报告字符串\n\nvisualize#\n\n生成性能可视化数据。\n\n\n\n返回值：SVG字符串\n\n\n示例#\n\n","routePath":"/api/renderer","lang":"","toc":[{"text":"RendererCore","id":"renderercore","depth":2,"charIndex":24},{"text":"构造函数","id":"构造函数","depth":3,"charIndex":75},{"text":"方法","id":"方法","depth":3,"charIndex":158},{"text":"init","id":"init","depth":4,"charIndex":163},{"text":"render","id":"render","depth":4,"charIndex":252},{"text":"getContext","id":"getcontext","depth":4,"charIndex":395},{"text":"getPerformanceMonitor","id":"getperformancemonitor","depth":4,"charIndex":431},{"text":"示例","id":"示例","depth":3,"charIndex":485},{"text":"SandboxRenderer","id":"sandboxrenderer","depth":2,"charIndex":493},{"text":"构造函数","id":"构造函数-1","depth":3,"charIndex":532},{"text":"方法","id":"方法-1","depth":3,"charIndex":542},{"text":"render","id":"render-1","depth":4,"charIndex":547},{"text":"destroy","id":"destroy","depth":4,"charIndex":694},{"text":"示例","id":"示例-1","depth":3,"charIndex":714},{"text":"RenderPerformanceMonitor","id":"renderperformancemonitor","depth":2,"charIndex":722},{"text":"方法","id":"方法-2","depth":3,"charIndex":776},{"text":"trackRenderStart","id":"trackrenderstart","depth":4,"charIndex":781},{"text":"trackRenderEnd","id":"trackrenderend","depth":4,"charIndex":875},{"text":"getMetrics","id":"getmetrics","depth":4,"charIndex":967},{"text":"getSlowRenders","id":"getslowrenders","depth":4,"charIndex":1005},{"text":"getAverageRenderTime","id":"getaveragerendertime","depth":4,"charIndex":1118},{"text":"getSlowestRender","id":"getslowestrender","depth":4,"charIndex":1170},{"text":"clearMetrics","id":"clearmetrics","depth":4,"charIndex":1212},{"text":"generateReport","id":"generatereport","depth":4,"charIndex":1236},{"text":"visualize","id":"visualize","depth":4,"charIndex":1277},{"text":"示例","id":"示例-2","depth":3,"charIndex":1316}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"样式应用 API","content":"#\n\n本文档提供样式应用相关的 API 参考。\n\n\nStyleApplier#\n\n样式应用工具类，负责处理和应用组件样式。\n\n\n\n\n构造函数#\n\n\n\n参数名       类型                     必填   描述\noptions   IStyleProcessOptions   否    样式处理选项\n\n\n方法#\n\napplyStyles#\n\n应用样式到DOM元素。\n\n\n\n参数名       类型            必填   描述\nelement   HTMLElement   是    目标DOM元素\nstyle     IStyleBasic   否    样式对象\n\n\n示例#\n\n\n\n\nIStyleProcessOptions#\n\n样式处理选项接口。\n\n\n\n\n属性#\n\n属性名                  类型        必填   描述\napplyDefaultStyles   boolean   否    是否应用默认样式\nconvertUnits         boolean   否    是否转换样式单位\nhandlePrefixes       boolean   否    是否处理样式前缀\n\n\nIStyleBasic#\n\n基础样式接口。\n\n\n\n\n扩展接口#\n\nIStyleMargin#\n\n边距样式接口。\n\n\n\nIStylePadding#\n\n内边距样式接口。\n\n\n\nIStyleBorder#\n\n边框样式接口。\n\n\n\nIStyleBorderRadius#\n\n圆角样式接口。\n\n\n\nIStyleBackground#\n\n背景样式接口。\n\n\n\n\nIStyleFont#\n\n字体样式接口。\n\n\n\n\n属性#\n\n属性名          类型       必填   描述\ncolor        string   是    文本颜色\nfontSize     string   是    字体大小\nfontWeight   string   否    字体粗细\nfontStyle    string   否    字体样式\nfontFamily   string   否    字体系列\n\n\nIStyleText#\n\n文本样式接口。\n\n\n\n\n属性#\n\n属性名              类型       必填   描述\ntextAlign        string   是    文本对齐方式\ntextDecoration   string   是    文本装饰\ntextTransform    string   是    文本转换\nlineHeight       string   是    行高\nletterSpacing    string   是    字母间距\nwordSpacing      string   是    单词间距\ntextShadow       string   是    文本阴影\n\n\n组件特定样式#\n\n针对不同组件的特定样式接口。\n\n\nDyStyleView#\n\n视图组件样式接口。\n\n\n\n\nDyStyleText#\n\n文本组件样式接口。\n\n\n\n\nDyStyleButton#\n\n按钮组件样式接口。\n\n\n\n\nDyStyleImage#\n\n图片组件样式接口。\n\n\n\n\n样式处理机制#\n\nStyleApplier 内部实现了以下样式处理机制：\n\n 1. 样式分类处理：将样式分为基础样式、字体样式和文本样式分别处理\n 2. 单位转换：自动为纯数字值添加 px 单位\n 3. 样式检测：通过类型守卫检测样式类型\n 4. 默认样式：可选择是否应用默认样式\n\n样式应用过程如下：\n\n 1. 检查样式是否存在\n 2. 应用基础样式（边距、内边距、边框、圆角、背景）\n 3. 检查并应用字体样式（颜色、大小、粗细、样式、字体系列）\n 4. 检查并应用文本样式（对齐、装饰、转换、行高、间距、阴影）","routePath":"/api/style-applier","lang":"","toc":[{"text":"StyleApplier","id":"styleapplier","depth":2,"charIndex":25},{"text":"构造函数","id":"构造函数","depth":3,"charIndex":65},{"text":"方法","id":"方法","depth":3,"charIndex":162},{"text":"applyStyles","id":"applystyles","depth":4,"charIndex":167},{"text":"示例","id":"示例","depth":3,"charIndex":301},{"text":"IStyleProcessOptions","id":"istyleprocessoptions","depth":2,"charIndex":309},{"text":"属性","id":"属性","depth":3,"charIndex":346},{"text":"IStyleBasic","id":"istylebasic","depth":2,"charIndex":527},{"text":"扩展接口","id":"扩展接口","depth":3,"charIndex":553},{"text":"IStyleMargin","id":"istylemargin","depth":4,"charIndex":560},{"text":"IStylePadding","id":"istylepadding","depth":4,"charIndex":586},{"text":"IStyleBorder","id":"istyleborder","depth":4,"charIndex":614},{"text":"IStyleBorderRadius","id":"istyleborderradius","depth":4,"charIndex":640},{"text":"IStyleBackground","id":"istylebackground","depth":4,"charIndex":672},{"text":"IStyleFont","id":"istylefont","depth":2,"charIndex":703},{"text":"属性","id":"属性-1","depth":3,"charIndex":728},{"text":"IStyleText","id":"istyletext","depth":2,"charIndex":925},{"text":"属性","id":"属性-2","depth":3,"charIndex":950},{"text":"组件特定样式","id":"组件特定样式","depth":2,"charIndex":1243},{"text":"DyStyleView","id":"dystyleview","depth":3,"charIndex":1269},{"text":"DyStyleText","id":"dystyletext","depth":3,"charIndex":1297},{"text":"DyStyleButton","id":"dystylebutton","depth":3,"charIndex":1325},{"text":"DyStyleImage","id":"dystyleimage","depth":3,"charIndex":1355},{"text":"样式处理机制","id":"样式处理机制","depth":2,"charIndex":1384}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"","content":"","routePath":"/components/BasicUsageDemo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"","content":"","routePath":"/components/DemoBlock","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"","content":"","routePath":"/components/PerformanceDemo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"","content":"","routePath":"/components/ReactIntegrationDemo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"","content":"","routePath":"/components/SandboxDemo","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"","content":"","routePath":"/components/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"","content":"","routePath":"/components/scale","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"","content":"","routePath":"/examples/code/basic-usage","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"示例代码","content":"#\n\n这里提供了低代码渲染引擎的所有示例代码，您可以直接查看和下载。\n\n\n基础用法#\n\n * basic-usage.ts - 展示低代码渲染引擎的基础用法\n\n\nReact 集成#\n\n * react-integration.tsx - 展示如何在 React 应用中集成低代码渲染引擎\n\n\n沙箱渲染#\n\n * sandbox-renderer.ts - 展示如何使用沙箱渲染器提供安全的渲染环境\n\n\n性能监控#\n\n * performance-monitor.ts - 展示如何使用性能监控工具跟踪和可视化渲染性能\n\n\n如何运行示例#\n\n 1. 克隆代码仓库\n 2. 安装依赖：pnpm install\n 3. 构建项目：pnpm build\n 4. 运行示例：pnpm examples\n\n\n在自己的项目中使用#\n\n","routePath":"/examples/code/","lang":"","toc":[{"text":"基础用法","id":"基础用法","depth":2,"charIndex":36},{"text":"React 集成","id":"react-集成","depth":2,"charIndex":80},{"text":"沙箱渲染","id":"沙箱渲染","depth":2,"charIndex":145},{"text":"性能监控","id":"性能监控","depth":2,"charIndex":200},{"text":"如何运行示例","id":"如何运行示例","depth":2,"charIndex":260},{"text":"在自己的项目中使用","id":"在自己的项目中使用","depth":2,"charIndex":347}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"","content":"","routePath":"/examples/code/performance-monitor","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"","content":"","routePath":"/examples/code/react-integration","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"","content":"","routePath":"/examples/code/sandbox-renderer","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"基础用法示例","content":"#\n\n本示例展示了低代码渲染引擎的基础用法。\n\n\n示例代码#\n\n\n\n> 完整代码可在 basic-usage.ts 中查看\n\n\n在线演示#\n\n\nSchema 示例#\n\n以下是示例中使用的 Schema：\n\n\n\n\n核心步骤#\n\n 1. 创建渲染器：使用 createRenderer 创建渲染器实例\n 2. 渲染 Schema：调用 renderer.render 方法渲染 Schema\n 3. 获取上下文：通过 renderer.getContext() 获取渲染上下文\n 4. 设置数据：使用 context.setData 设置数据\n 5. 注册事件处理器：使用 context.registerEventHandler 注册事件处理器\n 6. 更新渲染：调用 renderInstance.update 更新渲染\n 7. 可视化性能数据：使用 renderer.visualizePerformance() 获取性能数据可视化","routePath":"/examples/","lang":"","toc":[{"text":"示例代码","id":"示例代码","depth":2,"charIndex":24},{"text":"在线演示","id":"在线演示","depth":2,"charIndex":63},{"text":"Schema 示例","id":"schema-示例","depth":2,"charIndex":71},{"text":"核心步骤","id":"核心步骤","depth":2,"charIndex":105}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"","content":"","routePath":"/examples/performance","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"React 集成示例","content":"#\n\n本示例展示了如何在 React 应用中集成低代码渲染引擎。\n\n\n在线演示#\n\n\n使用示例#\n\n\n\n\n组件定义#\n\n\n\n> 完整代码可在 react-integration.tsx 中查看\n\n\n组件属性#\n\n属性名         类型                        必填   描述\nschema      DySchema                  是    要渲染的Schema\nonReady     (instance: any) => void   否    渲染完成回调\nclassName   string                    否    容器类名\nstyle       React.CSSProperties       否    容器样式\n\n\n核心功能#\n\n 1. 组件初始化：在 useEffect 中创建渲染器并渲染 Schema\n 2. 实例管理：使用 useRef 管理渲染器和渲染实例\n 3. 状态管理：使用 useState 管理加载状态和错误状态\n 4. 更新机制：监听 Schema 变化，自动更新渲染\n 5. 销毁清理：在组件卸载时销毁渲染实例\n 6. 错误处理：捕获并展示渲染错误\n\n\n最佳实践#\n\n 1. 性能优化：只在 Schema 变化时重新渲染\n 2. 资源清理：在组件卸载时销毁渲染实例，避免内存泄漏\n 3. 错误边界：使用错误边界组件捕获渲染错误\n 4. 加载状态：显示加载状态，提升用户体验\n 5. 类型安全：使用 TypeScript 类型定义，提高代码质量","routePath":"/examples/react-integration","lang":"","toc":[{"text":"在线演示","id":"在线演示","depth":2,"charIndex":34},{"text":"使用示例","id":"使用示例","depth":2,"charIndex":42},{"text":"组件定义","id":"组件定义","depth":2,"charIndex":52},{"text":"组件属性","id":"组件属性","depth":2,"charIndex":98},{"text":"核心功能","id":"核心功能","depth":2,"charIndex":353},{"text":"最佳实践","id":"最佳实践","depth":2,"charIndex":534}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"沙箱渲染器演示","content":"#\n\n本示例展示了如何使用沙箱渲染器提供安全的渲染环境。\n\n\n沙箱渲染器简介#\n\n沙箱渲染器使用 iframe 隔离技术，将渲染过程放在独立的 iframe 中执行，从而防止恶意代码执行，提供更安全的渲染环境。\n\n\n示例代码#\n\n\n\n> 完整代码可在 sandbox-renderer.ts 中查看\n\n\n在线演示#\n\n\n沙箱渲染器实现#\n\n\n\n\n沙箱渲染器特性#\n\n 1. 隔离环境：使用 iframe 创建隔离的渲染环境\n 2. 安全限制：通过 sandbox 属性限制 iframe 的权限\n 3. 样式隔离：避免主文档样式影响渲染结果\n 4. 脚本隔离：防止恶意脚本访问主文档\n 5. DOM 隔离：渲染结果通过 document.importNode 安全地复制到主文档\n\n\n使用场景#\n\n 1. 第三方内容渲染：渲染不可信的第三方内容\n 2. 用户生成内容：渲染用户上传或创建的内容\n 3. 插件系统：安全地渲染第三方插件\n 4. 多租户应用：隔离不同租户的渲染环境\n 5. 预览环境：提供安全的内容预览功能\n\n\n注意事项#\n\n 1. 性能开销：沙箱渲染相比直接渲染有额外的性能开销\n 2. 事件处理：iframe 中的事件需要特殊处理才能与主文档交互\n 3. 资源加载：iframe 中加载的资源需要考虑跨域问题\n 4. 内存管理：需要及时销毁不再使用的沙箱，避免内存泄漏\n 5. 兼容性：部分浏览器对 iframe sandbox 属性的支持有差异","routePath":"/examples/sandbox","lang":"","toc":[{"text":"沙箱渲染器简介","id":"沙箱渲染器简介","depth":2,"charIndex":30},{"text":"示例代码","id":"示例代码","depth":2,"charIndex":107},{"text":"在线演示","id":"在线演示","depth":2,"charIndex":151},{"text":"沙箱渲染器实现","id":"沙箱渲染器实现","depth":2,"charIndex":159},{"text":"沙箱渲染器特性","id":"沙箱渲染器特性","depth":2,"charIndex":172},{"text":"使用场景","id":"使用场景","depth":2,"charIndex":341},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":461}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"架构设计","content":"#\n\n低代码渲染引擎采用分层架构设计，实现渲染逻辑与业务逻辑的彻底分离。\n\n\n分层架构#\n\n\n\n\n核心模块#\n\n\n渲染核心引擎（RendererCore）#\n\n负责协调组件映射、Schema解析和样式应用，提供渲染、更新和销毁等主要功能。\n\n\n\n\n组件映射器（ComponentMapper）#\n\n管理组件的注册、获取和动态加载，支持命名空间格式的组件名称。\n\n\n\n\nSchema解析器（SchemaParser）#\n\n将Schema协议转换为渲染节点，处理组件属性和子节点。\n\n\n\n\n样式应用工具（StyleApplier）#\n\n处理和应用组件样式，支持基础样式、字体样式和文本样式。\n\n\n\n\n渲染上下文（RenderContext）#\n\n管理渲染过程中的状态和环境，提供数据模型、工具函数和事件处理。\n\n\n\n\n沙箱渲染器（SandboxRenderer）#\n\n提供隔离的渲染环境，防止恶意代码执行。\n\n\n\n\n数据流#\n\n低代码渲染引擎采用单向数据流模式，数据流向如下：\n\n 1. Schema协议定义UI结构和初始状态\n 2. 渲染引擎解析Schema并创建渲染节点树\n 3. 渲染节点树转换为DOM元素\n 4. 用户交互触发事件\n 5. 事件处理器更新数据模型\n 6. 数据模型变化触发UI更新\n 7. 渲染引擎重新渲染变化的部分\n\n\n扩展机制#\n\n低代码渲染引擎提供多种扩展机制：\n\n 1. 自定义组件：通过组件映射器注册自定义组件\n 2. 自定义工具函数：在渲染上下文中注册自定义工具函数\n 3. 自定义事件处理：注册自定义事件处理器\n 4. 自定义样式处理：扩展样式应用工具\n 5. 自定义渲染策略：实现自定义渲染策略","routePath":"/guide/architecture","lang":"","toc":[{"text":"分层架构","id":"分层架构","depth":2,"charIndex":38},{"text":"核心模块","id":"核心模块","depth":2,"charIndex":48},{"text":"渲染核心引擎（RendererCore）","id":"渲染核心引擎renderercore","depth":3,"charIndex":56},{"text":"组件映射器（ComponentMapper）","id":"组件映射器componentmapper","depth":3,"charIndex":123},{"text":"Schema解析器（SchemaParser）","id":"schema解析器schemaparser","depth":3,"charIndex":183},{"text":"样式应用工具（StyleApplier）","id":"样式应用工具styleapplier","depth":3,"charIndex":242},{"text":"渲染上下文（RenderContext）","id":"渲染上下文rendercontext","depth":3,"charIndex":297},{"text":"沙箱渲染器（SandboxRenderer）","id":"沙箱渲染器sandboxrenderer","depth":3,"charIndex":356},{"text":"数据流","id":"数据流","depth":2,"charIndex":405},{"text":"扩展机制","id":"扩展机制","depth":2,"charIndex":570}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"快速开始","content":"#\n\n本指南将帮助你快速上手低代码渲染引擎。\n\n\n安装#\n\n使用 npm、yarn 或 pnpm 安装：\n\n\n\n\n基础用法#\n\n\n1. 创建渲染器#\n\n\n\n\n2. 准备 Schema#\n\n\n\n\n3. 渲染 Schema#\n\n\n\n\n4. 更新渲染#\n\n\n\n\n5. 使用渲染上下文#\n\n\n\n\n在 React 中使用#\n\n低代码渲染引擎提供了 React 组件封装，方便在 React 应用中使用：\n\n\n\n\n下一步#\n\n * 了解架构设计\n * 查看示例\n * 阅读API参考","routePath":"/guide/getting-started","lang":"","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":24},{"text":"基础用法","id":"基础用法","depth":2,"charIndex":56},{"text":"1. 创建渲染器","id":"1-创建渲染器","depth":3,"charIndex":64},{"text":"2. 准备 Schema","id":"2-准备-schema","depth":3,"charIndex":78},{"text":"3. 渲染 Schema","id":"3-渲染-schema","depth":3,"charIndex":96},{"text":"4. 更新渲染","id":"4-更新渲染","depth":3,"charIndex":114},{"text":"5. 使用渲染上下文","id":"5-使用渲染上下文","depth":3,"charIndex":127},{"text":"在 React 中使用","id":"在-react-中使用","depth":2,"charIndex":143},{"text":"下一步","id":"下一步","depth":2,"charIndex":200}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"介绍","content":"#\n\n低代码渲染引擎是一个基于协议驱动的渲染框架，旨在提供高性能、可扩展的渲染能力，支持动态加载组件、样式隔离、沙箱环境等特性。\n\n\n什么是低代码渲染引擎？#\n\n低代码渲染引擎是一种将UI描述（通常以JSON格式的Schema表示）转换为实际UI界面的工具。它允许开发者通过配置而非编码的方式构建用户界面，从而提高开发效率\n、降低开发门槛。\n\n\n核心概念#\n\n\nSchema协议#\n\nSchema协议是描述UI结构、样式、行为的JSON格式数据，例如：\n\n\n\n\n组件映射#\n\n组件映射负责将Schema中的组件类型映射到实际的组件实现：\n\n\n\n\n渲染上下文#\n\n渲染上下文管理渲染过程中的状态和环境，包括数据模型、工具函数、事件处理等：\n\n\n\n\n为什么选择低代码渲染引擎？#\n\n * 提高开发效率：通过配置而非编码构建UI，减少重复工作\n * 降低开发门槛：非专业开发者也可以通过配置创建应用\n * 统一技术栈：提供一致的渲染能力，支持多种前端框架\n * 动态更新：支持运行时动态更新UI，无需重新构建\n * 性能优化：内置性能优化策略，提供更好的用户体验","routePath":"/guide/","lang":"","toc":[{"text":"什么是低代码渲染引擎？","id":"什么是低代码渲染引擎","depth":2,"charIndex":66},{"text":"核心概念","id":"核心概念","depth":2,"charIndex":172},{"text":"Schema协议","id":"schema协议","depth":3,"charIndex":180},{"text":"组件映射","id":"组件映射","depth":3,"charIndex":230},{"text":"渲染上下文","id":"渲染上下文","depth":3,"charIndex":272},{"text":"为什么选择低代码渲染引擎？","id":"为什么选择低代码渲染引擎","depth":2,"charIndex":322}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"低代码渲染引擎","content":"#\n\n基于协议驱动的低代码渲染引擎，提供高性能、可扩展的渲染能力。\n\n\n特性#\n\n * 协议驱动：基于标准化Schema协议定义应用的结构、行为和数据流\n * 组件动态加载：支持组件的按需加载和注册\n * 样式隔离：提供样式隔离机制，避免样式冲突\n * 沙箱环境：安全的沙箱渲染环境，防止恶意代码执行\n * 性能监控：内置性能监控工具，支持可视化性能数据\n * React集成：提供React组件封装，方便在React应用中使用\n\n\n快速开始#\n\n\n\n\n示例#\n\n查看示例了解更多用法。\n\n\nAPI参考#\n\n查看API参考了解详细的API文档。","routePath":"/","lang":"","toc":[{"text":"特性","id":"特性","depth":2,"charIndex":35},{"text":"快速开始","id":"快速开始","depth":2,"charIndex":216},{"text":"示例","id":"示例","depth":2,"charIndex":226},{"text":"API参考","id":"api参考","depth":2,"charIndex":245}],"domain":"","frontmatter":{},"version":""}]